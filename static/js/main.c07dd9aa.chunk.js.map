{"version":3,"sources":["redux/contacts/contactsActions.js","redux/contacts/contactsOperations.js","redux/contacts/contactsSelectors.js","components/Contacts/ContactForm/ContactForm.jsx","components/Contacts/Filter/Filter.jsx","components/Contacts/ListItem/ListItem.jsx","components/Contacts/ContactList/ContactList.jsx","components/Contacts/Contacts.jsx","components/App/App.js","redux/contacts/contactsReducer.js","redux/store.js","index.js","components/Contacts/ContactForm/ContactForm.module.css"],"names":["addNewContactRequested","createAction","addNewContactSuccess","addNewContactFailure","getAllContactsRequest","getAllContactsSuccess","getAllContactsFailure","filterChange","removeContactRequest","removeContactSuccess","removeContactFailure","axios","defaults","baseURL","selectAllContacts","state","contacts","items","selectFilter","filter","selectFilteredItems","createSelector","formattedFilter","toLowerCase","trim","item","name","includes","ContactForm","number","handleChange","e","setState","target","value","handleSubmit","preventDefault","props","some","alert","addNewContact","className","css","form","onSubmit","this","htmlFor","labelStyles","type","pattern","title","required","onChange","btnStyle","Component","mapDispatchToProps","contact","dispatch","_","a","post","data","connect","mapDispatch","id","ListItem","handleDelete","onClick","ContactList","console","log","map","Contacts","getAllContacts","delete","get","originalItems","loading","App","createReducer","handleError","action","payload","clearError","error","contactsReducer","combineReducers","store","configureStore","devTools","reducer","ReactDOM","render","StrictMode","document","getElementById","module","exports"],"mappings":"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","file":"static/js/main.c07dd9aa.chunk.js","sourcesContent":["import { createAction } from \"@reduxjs/toolkit\";\r\n\r\nconst addNewContactRequested = createAction(\"contacts/addNewContactRequested\");\r\nconst addNewContactSuccess = createAction(\"contacts/addNewContactSuccess\");\r\nconst addNewContactFailure = createAction(\"contacts/addNewContactFailure\");\r\n\r\nconst getAllContactsRequest = createAction(\"contacts/getAllContactsRequest\");\r\nconst getAllContactsSuccess = createAction(\"contacts/getAllContactsSuccess\");\r\nconst getAllContactsFailure = createAction(\"contacts/getAllContactsFailure\");\r\n\r\nconst filterChange = createAction(\"contacts/filterChange\");\r\n\r\nconst removeContactRequest = createAction(\"contacts/removeContactRequest\");\r\nconst removeContactSuccess = createAction(\"contacts/removeContactSuccess\");\r\nconst removeContactFailure = createAction(\"contacts/removeContactFailure\");\r\n\r\nexport {\r\n  addNewContactRequested,\r\n  addNewContactSuccess,\r\n  addNewContactFailure,\r\n  getAllContactsRequest,\r\n  getAllContactsSuccess,\r\n  getAllContactsFailure,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n  removeContactFailure,\r\n  filterChange,\r\n};","import axios from \"axios\";\r\n\r\nimport {\r\n  addNewContactFailure,\r\n  addNewContactRequested,\r\n  addNewContactSuccess,\r\n  getAllContactsFailure,\r\n  getAllContactsRequest,\r\n  getAllContactsSuccess,\r\n  removeContactFailure,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n\r\n} from \"./contactsActions\";\r\n\r\naxios.defaults.baseURL = \"http://localhost:3001/\";\r\n\r\nconst addNewContact = (contact) => async (dispatch, _) => {\r\n\r\n  dispatch(addNewContactRequested());\r\n  try {\r\n\r\n    const { data } = await axios.post(\"contacts\", contact);\r\n    dispatch(addNewContactSuccess(data));\r\n  } catch (error) {\r\n    dispatch(addNewContactFailure(error));\r\n  }\r\n};\r\n\r\nconst getAllContacts = () => async (dispatch) => {\r\n  dispatch(getAllContactsRequest());\r\n  try {\r\n    const { data } = await axios.get(\"contacts\");\r\n    dispatch(getAllContactsSuccess(data));\r\n  } catch (error) {\r\n    dispatch(getAllContactsFailure(error));\r\n  }\r\n};\r\n\r\nconst removeContact = (id) => async (dispatch) => {\r\n  dispatch(removeContactRequest());\r\n  try {\r\n    await axios.delete(`contacts/${id}`);\r\n    dispatch(removeContactSuccess(id));\r\n  } catch (error) {\r\n    dispatch(removeContactFailure(error));\r\n  }\r\n};\r\n\r\n\r\nexport { addNewContact, getAllContacts, removeContact };\r\n","import { createSelector } from \"@reduxjs/toolkit\";\r\n\r\nconst selectAllContacts = (state) => state.contacts.items;\r\nconst selectFilter = (state) => state.contacts.filter;\r\n\r\n\r\nconst selectFilteredItems = createSelector(\r\n  [selectAllContacts, selectFilter],  \r\n  (items, filter) => {\r\n    const formattedFilter = filter.toLowerCase().trim();\r\n    return items.filter((item) =>\r\n      item.name.toLowerCase().includes(formattedFilter)\r\n    );\r\n  }\r\n);\r\n\r\nexport { selectFilter, selectAllContacts, selectFilteredItems };\r\n","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport css from \"./ContactForm.module.css\";\r\nimport { connect } from \"react-redux\";\r\nimport { addNewContact } from \"../../../redux/contacts/contactsOperations\";\r\nimport { selectAllContacts } from \"../../../redux/contacts/contactsSelectors\";\r\n\r\nclass ContactForm extends Component {\r\n  static propTypes = {\r\n    addNewContact: PropTypes.func.isRequired,\r\n    items: PropTypes.array,\r\n  };\r\n\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n  \r\n  handleChange = (e) => {\r\n    this.setState({ [e.target.name]: e.target.value });\r\n  };\r\n\r\n  handleSubmit = (e) => {\r\n    e.preventDefault();\r\n\r\n    const { name } = this.state;\r\n\r\n    const isDuplicate = this.props.items.some((item) => item.name === name);\r\n    if (isDuplicate) {\r\n      alert(\"Такоe имя уже существует \" + name);\r\n      return;\r\n    }\r\n    this.props.addNewContact({ ...this.state });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <>\r\n        <form className={css.form} onSubmit={this.handleSubmit}>\r\n          <label htmlFor={css.labelStyles}>Name</label>\r\n          <input\r\n            name=\"name\"\r\n            type=\"text\"\r\n            pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n            title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={this.state.name}\r\n          />\r\n          <label htmlFor={css.labelStyles}>Number</label>\r\n          <input\r\n            type=\"tel\"\r\n            name=\"number\"\r\n            pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n            title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n            required\r\n            onChange={this.handleChange}\r\n            value={this.state.number}\r\n          />\r\n          <button type=\"submit\" className={css.btnStyle}>\r\n            Add\r\n          </button>\r\n        </form>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => ({\r\n  items: selectAllContacts(state),\r\n});\r\n\r\nconst mapDispatchToProps = {\r\n  addNewContact,\r\n  \r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactForm);\r\n","import PropTypes from \"prop-types\";\r\nimport { connect } from \"react-redux\";\r\nimport { filterChange } from \"../../../redux/contacts/contactsActions\";\r\nimport { selectFilter } from \"../../../redux/contacts/contactsSelectors\";\r\n\r\nconst Filter = ({ handleChange, filter }) => {\r\n  return (\r\n    <div className=\"filterStyle\">\r\n      <label htmlFor=\"filter\">Find contacts by name</label>\r\n      <input\r\n        id=\"filter\"\r\n        name=\"filter\"\r\n        type=\"text\"\r\n        className=\"px-4 py-3 rounded-md\"\r\n        onChange={handleChange}\r\n        value={filter}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nFilter.propTypes = {\r\n  handleChange: PropTypes.func.isRequired,\r\n  filter: PropTypes.string.isRequired,\r\n};\r\n\r\nconst mapState = (state) => {\r\n  return {\r\n    filter: selectFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatch = {\r\n  handleChange: (e) => filterChange(e.target.value),\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Filter);","import PropTypes from \"prop-types\";\r\n\r\nconst ListItem = ({ item, handleDelete }) => {\r\n  const {  name, number } = item;\r\n\r\n  return (\r\n    <li>\r\n      <div>\r\n        <span> { name }:{number}</span>\r\n        <button onClick={handleDelete}>Delete</button>\r\n      </div>\r\n    </li>\r\n  );\r\n};\r\n\r\nListItem.propTypes = {\r\n  item: PropTypes.shape({\r\n    name: PropTypes.string.isRequired,\r\n    number: PropTypes.string.isRequired,\r\n  }).isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ListItem;","import PropTypes from \"prop-types\";\r\nimport ListItem from \"../ListItem/ListItem\";\r\n\r\nconst ContactList = ({ items, handleDelete }) => {\r\n  console.log(items);\r\n  return (\r\n    <ul>\r\n      {items.map((item) => (\r\n        <ListItem\r\n          key={item.id}\r\n          item={item}\r\n          handleDelete={() => handleDelete(item.id)}\r\n        />\r\n      ))}\r\n    </ul>\r\n  );\r\n};\r\n\r\nContactList.propTypes = {\r\n  items: PropTypes.arrayOf(PropTypes.shape({ id: PropTypes.string.isRequired }))\r\n    .isRequired,\r\n  handleDelete: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactList;\r\n","import { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport ContactForm from \"./ContactForm/ContactForm\";\r\nimport Filter from \"./Filter/Filter\";\r\nimport List from \"./ContactList/ContactList\"\r\n\r\nimport {\r\n  getAllContacts,\r\n  removeContact,\r\n} from \"../../redux/contacts/contactsOperations\";\r\nimport {\r\n  selectAllContacts,\r\n  selectFilteredItems,\r\n} from \"../../redux/contacts/contactsSelectors\";\r\n\r\nclass Contacts extends Component {\r\n  \r\n  componentDidMount() {\r\n    this.props.getAllContacts();\r\n  }\r\n  render() {\r\n    const { items } = this.props;\r\n\r\n    return (\r\n      <div className=\"container\">\r\n        <h1>Phonebook</h1>\r\n        <ContactForm handleSubmit={this.handleSubmit} />\r\n        <h2>Contacts</h2>\r\n        <Filter filter={this.filter} handleChange={this.handleChange} />\r\n        <List items={items} handleDelete={this.props.handleDelete} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapState = (state) => {\r\n  const items = selectAllContacts(state);\r\n\r\n  return {\r\n    items: selectFilteredItems(state),\r\n    originalItems: items,\r\n    loading: state.contacts.loading,\r\n  };\r\n};\r\n\r\nconst mapDispatch = {\r\n  handleDelete: removeContact,\r\n  getAllContacts,\r\n};\r\n\r\nexport default connect(mapState, mapDispatch)(Contacts);\r\n","import React from \"react\";\r\nimport Contacts from \"../Contacts/Contacts.jsx\";\r\n\r\nconst App = () => {\r\n  return (\r\n    <div className=\"mainContainer\">\r\n      <Contacts />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import { combineReducers, createReducer } from \"@reduxjs/toolkit\";\r\nimport {\r\n  addNewContactFailure,\r\n  addNewContactRequested,\r\n  addNewContactSuccess,\r\n  filterChange,\r\n  getAllContactsFailure,\r\n  getAllContactsRequest,\r\n  getAllContactsSuccess,\r\n  removeContactFailure,\r\n  removeContactRequest,\r\n  removeContactSuccess,\r\n\r\n} from \"./contactsActions\";\r\n\r\nconst loading = createReducer(false, {\r\n  [getAllContactsRequest]: () => true,\r\n  [getAllContactsSuccess]: () => false,\r\n  [getAllContactsFailure]: () => false,\r\n  [addNewContactRequested]: () => true,\r\n  [addNewContactSuccess]: () => false,\r\n  [addNewContactFailure]: () => false,\r\n  [removeContactRequest]: () => true,\r\n  [removeContactSuccess]: () => false,\r\n  [removeContactFailure]: () => false,\r\n});\r\n\r\nconst handleError = (_, action) => action.payload;\r\nconst clearError = () => null;\r\n\r\nconst error = createReducer(null, {\r\n  [getAllContactsRequest]: clearError,\r\n  [getAllContactsFailure]: handleError,\r\n  [addNewContactRequested]: clearError,\r\n  [addNewContactFailure]: handleError,\r\n  [removeContactRequest]: clearError,\r\n  [removeContactFailure]: handleError,\r\n});\r\n\r\nconst items = createReducer([], {\r\n  [getAllContactsSuccess]: (_, action) => action.payload,\r\n  [addNewContactSuccess]: (state, action) => [action.payload, ...state],\r\n  [removeContactSuccess]: (state, action) =>\r\n    state.filter((item) => item.id !== action.payload),\r\n  \r\n});\r\n\r\nconst filter = createReducer(\"\", {\r\n  [filterChange]: (_, action) => action.payload,\r\n});\r\n\r\nconst contactsReducer = combineReducers({\r\n  items,\r\n  filter,\r\n  loading,\r\n  error,\r\n});\r\n\r\nexport default contactsReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport contactsReducer from \"./contacts/contactsReducer\";\r\n\r\nconst store = configureStore({\r\n  // middleware: [],\r\n  devTools: true,\r\n  reducer: {\r\n    contacts: contactsReducer,\r\n  },\r\n});\r\n\r\nexport { store };\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\nimport { Provider } from \"react-redux\";\r\n\r\nimport App from \"./components/App/App\";\r\nimport \"./styles/global.css\";\r\nimport { store} from \"./redux/store\";\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <Provider store={store}>\r\n        \r\n    <App />\r\n\r\n    </Provider>\r\n  </React.StrictMode>,\r\n  document.getElementById(\"root\")\r\n);\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"form\":\"ContactForm_form__2lT-7\",\"btnStyle\":\"ContactForm_btnStyle__3J_1d\",\"labelStyles\":\"ContactForm_labelStyles__1MZ25\"};"],"sourceRoot":""}